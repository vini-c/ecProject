import {
  VWindow,
  VWindowItem,
  makeVWindowItemProps,
  makeVWindowProps
} from "./chunk-KX5DEJWT.js";
import {
  VImg,
  makeVImgProps
} from "./chunk-4JMG7Z7B.js";
import "./chunk-NLMBTHDZ.js";
import "./chunk-V4X4U225.js";
import "./chunk-DQKNPIVV.js";
import "./chunk-SBK55K2H.js";
import "./chunk-2PSEIA2V.js";
import {
  VBtn
} from "./chunk-67LZ73LI.js";
import "./chunk-5GCCEYOR.js";
import "./chunk-WCCFG4FG.js";
import "./chunk-X5LCR5Y3.js";
import "./chunk-OO3C63EJ.js";
import "./chunk-GIV2GD5R.js";
import {
  VProgressLinear
} from "./chunk-ED2ZZ7WA.js";
import "./chunk-MYTL2CZR.js";
import {
  VDefaultsProvider
} from "./chunk-ZTWUC6WJ.js";
import "./chunk-CCFOGR7H.js";
import "./chunk-MH62T4BM.js";
import "./chunk-74OKH6YK.js";
import "./chunk-2MFO24UZ.js";
import "./chunk-FHVIUH3S.js";
import "./chunk-VEQ3WX4M.js";
import "./chunk-BXHC3DST.js";
import "./chunk-ZDBJXMN6.js";
import "./chunk-F3JA55NJ.js";
import "./chunk-3IVOHSUP.js";
import "./chunk-FNEVS6ON.js";
import "./chunk-VKH4I57Q.js";
import {
  IconValue
} from "./chunk-UHLAWF5A.js";
import "./chunk-LYYCJ7RZ.js";
import "./chunk-2FTY5EI2.js";
import {
  useLocale
} from "./chunk-HHKCN2H5.js";
import {
  useProxiedModel
} from "./chunk-M6OIPLKF.js";
import {
  convertToUnit,
  genericComponent,
  propsFactory,
  useRender
} from "./chunk-WHYBA6IG.js";
import {
  Fragment,
  createVNode,
  mergeProps,
  onMounted,
  ref,
  watch
} from "./chunk-6CG2VZJB.js";

// node_modules/vuetify/lib/components/VCarousel/VCarousel.mjs
import "/Users/vinicius.rocha/Documents/GitHub/ecProject/node_modules/vuetify/lib/components/VCarousel/VCarousel.css";
var makeVCarouselProps = propsFactory({
  color: String,
  cycle: Boolean,
  delimiterIcon: {
    type: IconValue,
    default: "$delimiter"
  },
  height: {
    type: [Number, String],
    default: 500
  },
  hideDelimiters: Boolean,
  hideDelimiterBackground: Boolean,
  interval: {
    type: [Number, String],
    default: 6e3,
    validator: (value) => Number(value) > 0
  },
  progress: [Boolean, String],
  verticalDelimiters: [Boolean, String],
  ...makeVWindowProps({
    continuous: true,
    mandatory: "force",
    showArrows: true
  })
}, "VCarousel");
var VCarousel = genericComponent()({
  name: "VCarousel",
  props: makeVCarouselProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const model = useProxiedModel(props, "modelValue");
    const {
      t
    } = useLocale();
    const windowRef = ref();
    let slideTimeout = -1;
    watch(model, restartTimeout);
    watch(() => props.interval, restartTimeout);
    watch(() => props.cycle, (val) => {
      if (val)
        restartTimeout();
      else
        window.clearTimeout(slideTimeout);
    });
    onMounted(startTimeout);
    function startTimeout() {
      if (!props.cycle || !windowRef.value)
        return;
      slideTimeout = window.setTimeout(windowRef.value.group.next, +props.interval > 0 ? +props.interval : 6e3);
    }
    function restartTimeout() {
      window.clearTimeout(slideTimeout);
      window.requestAnimationFrame(startTimeout);
    }
    useRender(() => {
      const windowProps = VWindow.filterProps(props);
      return createVNode(VWindow, mergeProps({
        "ref": windowRef
      }, windowProps, {
        "modelValue": model.value,
        "onUpdate:modelValue": ($event) => model.value = $event,
        "class": ["v-carousel", {
          "v-carousel--hide-delimiter-background": props.hideDelimiterBackground,
          "v-carousel--vertical-delimiters": props.verticalDelimiters
        }, props.class],
        "style": [{
          height: convertToUnit(props.height)
        }, props.style]
      }), {
        default: slots.default,
        additional: (_ref2) => {
          let {
            group
          } = _ref2;
          return createVNode(Fragment, null, [!props.hideDelimiters && createVNode("div", {
            "class": "v-carousel__controls",
            "style": {
              left: props.verticalDelimiters === "left" && props.verticalDelimiters ? 0 : "auto",
              right: props.verticalDelimiters === "right" ? 0 : "auto"
            }
          }, [group.items.value.length > 0 && createVNode(VDefaultsProvider, {
            "defaults": {
              VBtn: {
                color: props.color,
                icon: props.delimiterIcon,
                size: "x-small",
                variant: "text"
              }
            },
            "scoped": true
          }, {
            default: () => [group.items.value.map((item, index) => {
              const props2 = {
                id: `carousel-item-${item.id}`,
                "aria-label": t("$vuetify.carousel.ariaLabel.delimiter", index + 1, group.items.value.length),
                class: ["v-carousel__controls__item", group.isSelected(item.id) && "v-btn--active"],
                onClick: () => group.select(item.id, true)
              };
              return slots.item ? slots.item({
                props: props2,
                item
              }) : createVNode(VBtn, mergeProps(item, props2), null);
            })]
          })]), props.progress && createVNode(VProgressLinear, {
            "class": "v-carousel__progress",
            "color": typeof props.progress === "string" ? props.progress : void 0,
            "modelValue": (group.getItemIndex(model.value) + 1) / group.items.value.length * 100
          }, null)]);
        },
        prev: slots.prev,
        next: slots.next
      });
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCarousel/VCarouselItem.mjs
var makeVCarouselItemProps = propsFactory({
  ...makeVImgProps(),
  ...makeVWindowItemProps()
}, "VCarouselItem");
var VCarouselItem = genericComponent()({
  name: "VCarouselItem",
  inheritAttrs: false,
  props: makeVCarouselItemProps(),
  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    useRender(() => {
      const imgProps = VImg.filterProps(props);
      const windowItemProps = VWindowItem.filterProps(props);
      return createVNode(VWindowItem, mergeProps({
        "class": "v-carousel-item"
      }, windowItemProps), {
        default: () => [createVNode(VImg, mergeProps(attrs, imgProps), slots)]
      });
    });
  }
});
export {
  VCarousel,
  VCarouselItem
};
//# sourceMappingURL=vuetify_lib_components_VCarousel_index__mjs.js.map
